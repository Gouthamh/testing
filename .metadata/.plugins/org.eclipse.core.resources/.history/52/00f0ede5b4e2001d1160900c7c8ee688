package sftpconnection;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpATTRS;

public class SftpFileRecordCount {

    public static void main(String[] args) {
        String sftpHost = "172.20.21.57";
        int sftpPort = 31703;
        String sftpUserName = "admin";
        String sftpPassword = "admin";
        String sshKey = "172.20.21.57 ssh-rsa AAAAB3NzaC1yc2EAAAADA";

        try {
            JSch jsch = new JSch();
            Session session = jsch.getSession(sftpUserName, sftpHost, sftpPort);
            jsch.setKnownHosts(new ByteArrayInputStream(sshKey.getBytes()));
            session.setPassword(sftpPassword);
            session.connect();
            Channel channel = session.openChannel("sftp");
            ChannelSftp channelSftp = (ChannelSftp) channel;
            channelSftp.connect();

            channelSftp.cd("/bulk-store/");
            Vector<ChannelSftp.LsEntry> ls = channelSftp.ls("/bulk-store/");

            List<Integer> lineCounts = new ArrayList<>();
            for (ChannelSftp.LsEntry entry : ls) {
                SftpATTRS attrs = channelSftp.lstat("/bulk-store/" + entry.getFilename());
                String sftpPermission = attrs.getPermissionsString();
                if (sftpPermission.equals("-rw-r--r--")) {
                    InputStream inputStream = channelSftp.get("/bulk-store/" + entry.getFilename());
                    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
                    int lines = 0;
                    while (reader.readLine() != null) {
                        lines++;
                    }
                    lineCounts.add(lines);
                }
            }

            Collections.sort(lineCounts);
            System.out.println("Sorted line counts: " + lineCounts);

            Map<Integer, Integer> lineCountFrequency = new HashMap<>();
            for (int i = 0; i < lineCounts.size(); i++) {
                int key = lineCounts.get(i);
                if (lineCountFrequency.containsKey(key)) {
                    lineCountFrequency.put(key, lineCountFrequency.get(key) + 1);
                } else {
                    lineCountFrequency.put(key, 1);
                }
            }

            for (Integer key : lineCountFrequency.keySet()) {
                System.out.println("Line count " + key + " occurs " + lineCountFrequency.get(key) + " times.");
            }

            channelSftp.exit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
