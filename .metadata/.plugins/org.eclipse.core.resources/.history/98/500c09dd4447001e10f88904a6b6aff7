package com.bulkservice;

import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.both;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.equalToObject;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;

import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.bulk.services.utilities.MongoDb;
import com.bulk.services.utilities.RecordCountExample;
import com.bulks.endpoints.Routers;
import com.bulks.endpoints.UserRequests;
import com.playload.bulkrequestplayload;

import io.restassured.response.Response;
import java.sql.Connection;

public class BulkDBType {

	bulkrequestplayload offset = new bulkrequestplayload();
	UserRequests user = new UserRequests();

	long count = 0;
	int recordcount = 0;

	@BeforeClass

	public void mysqlcount() throws ClassNotFoundException, SQLException {
		RecordCountExample mysqlcounts = new RecordCountExample();
		Connection connection = mysqlcounts.getConnection(Routers.jdbcUrl, Routers.username, Routers.password);
		recordcount = mysqlcounts.getCountFromTable(connection, Routers.UploadTest);
		System.out.println("recordcount---" + recordcount);
	}

	@BeforeMethod
	public void MongoDbBeforecount() throws InterruptedException {
		MongoDb mongocount = new MongoDb();
		mongocount.MongoDBChecker(Routers.mongoURL, Routers.databasename, "NOTIFICATION_EMAIL_HISTORY");
		count = mongocount.countRecordsWithNotificationId();
		System.out.println("@BeforeMethod--" + count);
		Assert.assertEquals(count, count);

		mongocount.close();
	}

	@Test
	public void mysqlpostbulkservice() throws IOException {
		String offset = "Offset.json";
		Response response = user.createuser1(offset);
		response.then().body("response", equalTo("mysql-post-bulk-service triggered Successfully")).statusCode(200);
		System.out.println("mysqlpostbulkservice");
	}

	@AfterMethod
	public void MongoDbAftercount() throws InterruptedException {

		MongoDb mongocount = new MongoDb();
		mongocount.MongoDBChecker(Routers.mongoURL, Routers.databasename, "NOTIFICATION_EMAIL_HISTORY");
		long count1 = mongocount.countRecordsWithNotificationId();
		System.out.println("@AfterMethod--" + count1);
		System.out.println("@BeforeMethod--" + count);
		Assert.assertEquals(count + recordcount, count1);
		mongocount.close();
	}

}
